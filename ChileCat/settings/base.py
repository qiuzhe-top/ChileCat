'''
Author: 邹洋
Date: 2022-02-12 22:12:05
Email: 2810201146@qq.com
LastEditors:  
LastEditTime: 2022-03-17 22:22:07
Description: 
'''
"""
Django settings for ChileCat project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
import time

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "..")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-tr$nmoq=h4@b$i_h&vsf71m&gq%%@+hp8=aq#62(xer5s!+t2m'

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ["*"]


# Application definition

PLUG = [
    'channels',
    'simpleui',
    'rest_framework',
    'cool',
    'django_extensions',
    'corsheaders',
]

SYS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MY_APPS = [
    'AppUser',
    'AppAttendance',
    'AppInformation'
]

INSTALLED_APPS = PLUG + SYS + MY_APPS
AUTH_USER_MODEL = 'AppUser.User'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 跨域
    'django.middleware.common.CommonMiddleware',  # 跨域
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'Core.system.exception.ExceptionMiddleware'
]

ROOT_URLCONF = 'ChileCat.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ChileCat.wsgi.application'
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/


LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

APPEND_SLASH = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATIC_ROOT = os.path.join(BASE_DIR, "static")
# CORS
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ORIGIN_WHITELIST = ('http://127.0.0.1:8080',)# 允许跨域IP/域名列表
# 跨域允许的请求方式(可选)
CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'OPTIONS',
    'DELETE',
    'PATCH',
    'PUT',
    'VIEW',
)
# 跨域允许的头部参数(可选)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
    'access-control-allow-origin',
    'Access-Control-Allow-Origin',
    'token',
)
# JWT 密钥
SECRET_KEY = 'AHABsyAS.ASD.?SA&&w1dsa.1.sdssagrh.;ASLKI'

# 全局权限控制
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        "Core.system.authentication.AuthPermission",
    ],
    'EXCEPTION_HANDLER': 'Core.system.exception_handler.custom_exception_handler',
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DJANGO_COOL = {
    'API_ERROR_CODES': (
        ('ERR_DEMO_NOLOGIN', (3001, '请先登陆')),
        ('ERR_DEMO_PERMISSION', (3002, '权限错误')),
        ('ERR_USER_NOTFOUND', (5001, '用户名或密码错误')),
        ('ERR_USER_NO_PASSWORD', (5007, '密码错误')),
        ('ERR_USER_DIFFERENT_PASSWORD', (5002, '两次密码不一致')),
        ('ERR_USER_DUPLICATE_USERNAME', (5003, '用户名已存在')),
        ('ERR_USER_DUPLICATE_MOBILE', (5004, '手机号已存在')),
        ('ERR_USER_DUPLICATE_EMAIL', (5005, '邮箱已存在')),
        ('ERR_USER_EMAIL_FORMAT_ERROR', (5006, '邮箱格式错误')),
        ('ERR_USER_UNABLE_TO_SEARCH_FOR_USERR', (5008, '搜索的用户不存在')),
        ('ERR_TAKS_USER_HAS_NO_TASK', (5021, '没有对应任务')),
        ('ERR_TASK_ISOPEN_FALSE', (5022, '任务未开启')),
        ('ERR_UPDATE_BADS_IS_NULL', (5023, '床位使用中')),
        ('EXCEL_OUT_NO_DATA', (5024, 'Excel数据为空')),
        ('DORMITORY_NOT_ARRANGED', (5025, '未安排寝室')),
        ('CUSTOM_SCORE_ERROR', (5026, '自定义分数必须在1-10')),
        ('TASK_SUBMISSION_FAILURE', (5027, '任务提交失败')),
        ('THE_REASON_IS_EMPTY', (5028, '原因为空')),
        ('NO_COLLEGE_CODE', (5029, '缺少分院代码/分院不存在')),
        ('ABNORMAL_ATTENDANCE', (5030, '查询异常')),
    )
}
# SimpleUi 配置
# 服务器信息
SIMPLEUI_HOME_INFO = True
# 隐藏右侧SimpleUI广告链接和使用分析
SIMPLEUI_HOME_INFO = False
SIMPLEUI_ANALYSIS = False

# 修改左侧菜单首页设置
# SIMPLEUI_HOME_PAGE = '/api/manage/index'  # 指向页面
# SIMPLEUI_HOME_TITLE = '百度欢迎你!' # 首页标题

# 设置右上角Home图标跳转链接，会以另外一个窗口打开
SIMPLEUI_INDEX = 'zhcy.top'

log_path = '/project/ChileCat/Log'
LOGGING = {
    'version':1,# 版本
    'disable_existing_loggers':False, # 是否禁用已存在的日志器
    # 日志格式
    'formatters': {
        'standard':{
            'format':'[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '
                     '[%(levelname)s]- %(message)s'
        },
        'simple':{
            'format':'%(levelname)s %(module)s %(lineno)d %(message)s'
        },
        'verbose':{
            'format':'%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        }
    },
    # 过滤器
    'filters': {
        'require_debug_true':{
            '()':'django.utils.log.RequireDebugTrue'
        }
    },
    # 处理器
    'handlers': {
        # 默认记录所有日志
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'all-{}.log'.format(time.strftime('%Y-%m'))),
            'maxBytes': 1024 * 1024 * 30,  # 文件大小
            'backupCount': 5,  # 备份数
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
        # 输出错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'error-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份数
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码
        },
        # 输出info日志
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',  # 设置默认编码
        },
        # 控制台输出
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        }
 
    },
        # 配置日志处理器
    'loggers': {
        'django': {
            'handlers': ['default', 'console'],
            'level': 'INFO',  # 日志器接收的最低日志级别
            'propagate': True,
        },
        # log 调用时需要当作参数传入
        'log': {
            'handlers': ['error', 'info', 'console', 'default'],
            'level': 'INFO',
            'propagate': True
        },
    }

}